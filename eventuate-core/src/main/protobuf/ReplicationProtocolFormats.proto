/*
 * Copyright (C) 2015 - 2016 Red Bull Media House GmbH <http://www.redbullmediahouse.com> - all rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
option java_package = "com.rbmhtechnology.eventuate.serializer";
option optimize_for = SPEED;

import "CommonFormats.proto";
import "DurableEventFormats.proto";
import "ReplicationFilterFormats.proto";

message ApplicationVersionFormat {
  int32 major = 1;
  int32 minor = 2;
}

message LogInfoFormat {
  string logName = 1;
  int64 sequenceNr = 2;
}

message ReplicationInfoFormat {
  string endpointId = 1;
  repeated LogInfoFormat logInfos = 2;
}

message GetReplicationInfoFormat {
  // no fields
}

message GetReplicationInfoSuccessFormat {
  ReplicationInfoFormat info = 1;
}

message SynchronizeReplicationProgressFormat {
  ReplicationInfoFormat info = 1;
}

message SynchronizeReplicationProgressSuccessFormat {
  ReplicationInfoFormat info = 1;
}

message SynchronizeReplicationProgressFailureFormat {
  PayloadFormat cause = 1;
}

message SynchronizeReplicationProgressSourceExceptionFormat {
  string message = 1;
}

message ReplicationReadEnvelopeFormat {
  ReplicationReadFormat payload = 1;
  string logName = 2;
  string targetApplicationName = 3;
  ApplicationVersionFormat targetApplicationVersion = 4;
}

message ReplicationReadFormat {
  int64 fromSequenceNr = 1;
  int32 max = 2;
  int32 scanLimit = 3;
  ReplicationFilterTreeFormat filter = 4;
  string targetLogId = 5;
  string replicator = 6;
  VectorTimeFormat currentTargetVersionVector = 7;
}

message ReplicationReadSuccessFormat {
  repeated DurableEventFormat events = 1;
  int64 fromSequenceNr = 2;
  int64 replicationProgress = 3;
  string targetLogId = 4;
  VectorTimeFormat currentSourceVersionVector = 5;
}

message ReplicationReadFailureFormat {
  PayloadFormat cause = 1;
  string targetLogId = 2;
}

message ReplicationReadSourceExceptionFormat {
  string message = 1;
}

message IncompatibleApplicationVersionExceptionFormat {
  string sourceEndpointId = 1;
  ApplicationVersionFormat sourceApplicationVersion = 2;
  ApplicationVersionFormat targetApplicationVersion = 3;
}

message ReplicationDueFormat {
  // no fields
}
